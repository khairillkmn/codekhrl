#include <iostream>
#include <bits/stdc++.h>

using namespace std;

bool isOperator(char c) {
  return (!isalpha(c) && !isdigit(c));
}

int getPriority(char C) {
  if (C == '-' || C == '+')
    return 1;
  else if (C == '*' || C == '/')
    return 2;
  else if (C == '^')
    return 3;
  return 0;
}

string infixToPostfix(string infix) {
  infix = '(' + infix + ')';
  int l = infix.size();
  stack < char > char_stack;
  string output;

  for (int i = 0; i < l; i++) {

    // Jika yang terdeteksi adalah operand, taruh di output
    if (isalpha(infix[i]) || isdigit(infix[i]))
      output += infix[i];

    else if (infix[i] == '(')
      char_stack.push('(');

    // Jika yang terdeteksi adalah ')', pop dari stack dan taruh di output
    else if (infix[i] == ')') {
      while (char_stack.top() != '(') {
        output += char_stack.top();
        char_stack.pop();
      }

      // Pop '(' dari stack
      char_stack.pop();
    }

    // Operator ditemukan
    else {
      if (isOperator(char_stack.top())) {
        if (infix[i] == '^') {
          while (getPriority(infix[i]) <= getPriority(char_stack.top())) {
            output += char_stack.top();
            char_stack.pop();
          }

        } else {
          while (getPriority(infix[i]) < getPriority(char_stack.top())) {
            output += char_stack.top();
            char_stack.pop();
          }

        }

        // Push Operator terakhir ke stack
        char_stack.push(infix[i]);
      }
    }
  }
  while (!char_stack.empty()) {
    output += char_stack.top();
    char_stack.pop();
  }
  return output;
}

string infixToPrefix(string infix) {
  //Reverse String
  //Reverse Postfix
  int l = infix.size();

  // Reverse infix
  reverse(infix.begin(), infix.end());

  for (int i = 0; i < l; i++) {

    if (infix[i] == '(') {
      infix[i] = ')';
      i++;
    } else if (infix[i] == ')') {
      infix[i] = '(';
      i++;
    }
  }

  string prefix = infixToPostfix(infix);

  // Reverse postfix
  reverse(prefix.begin(), prefix.end());

  return prefix;
}

int main() {
  string s;
  cout << "Masukkan Infix : ";
  cin >> s;
  cout << "Hasil Prefix : " << infixToPrefix(s) << endl;
  return 0;
}
